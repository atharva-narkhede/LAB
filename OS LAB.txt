//		SHELL

//even odd

read number

if ((number % 2 == 0)); then
  echo "Even"
else
  echo "Odd"
fi

---------------------------------------

//average of n number

read n

sum=0

for (( i=1; i<=n; i++ ))
do
  read num
  sum=$((sum + num))
done

average=$((sum / n))

echo $average


-----------------------------------------

//prime

read number

isPrime=true

if ((number <= 1)); then
  isPrime=false
else
  for ((i=2; i<=number/2; i++))
  do
    if ((number % i == 0)); then
      isPrime=false
      break
    fi
  done
fi

if [ "$isPrime" = true ]; then
  echo "Prime"
else
  echo "Not Prime"
fi


-------------------------------------------------

//Implement priority scheduling algorithm ( least priority value is the highest priority)

// You are using GCC
//Simulation of FCFS Scheduling algorithm used in Operating systems//
//Fixed time slice of 2 is used.Process queue is implemented a sLinked list//
//The program is tuned for user specified number of processes and Buurst times need to be entered//


#include <stdio.h>

#include <iostream>
#include <malloc.h>


struct node
{
	int arrival;
	int burst;
	int priority;
	int turnaround;
	int waiting;
	int finish;
	int name;

	struct node *next;
};

struct node *head = NULL;
struct node *tail = NULL;


int empty()
{
	if (head == NULL)
		return 1;
	else
		return 0;
}

void append (struct node *temp)
{			
	if (head == NULL)
	{
		head = temp;
		tail = temp;
		temp->next=NULL;
	}
	else
	{ struct node *t,*previous;
	    if (head->priority>temp->priority)
	    {
	    	temp->next=head;
	    	head =temp;
	    	return ;
		}
		previous=head;
		t=head->next;
		while(t!=NULL && t->priority <= temp->priority)
		{
			previous=t;
			t=t->next;
		}
		temp -> next = t;
		previous->next = temp;
		return ; 
	}
}

struct node* serve ()
{
	struct node *temp;
	if (!empty())
	{
		temp = head;
		head = head -> next;

		return temp;			
	}
	else
	{
		//std::cout<<"Ready q is empty"<<"\n";
		temp = new(node);
		temp -> name = 0;
		return temp;
	}
}	

int main()
{
	int max;

	struct node *p[10];
	struct node *exe;

	int period = 0;
	int count = 0;
	int i;
	int choice;

	double totalWaiting = 0;
	double avgWaiting;
	
	scanf("%d",&max);
	
	
	
	 for (i = 0; i < max; i++)
		{	p[i] =new(node);
			p[i] -> turnaround = 0;
			p[i] -> waiting = 0;
			p[i] -> finish = 0;
			p[i] -> name = i + 1;
			p[i] -> next = NULL;
		}

			for (i = 0; i < max; i++)
			{
			//	std::cin>>p[i] -> arrival;
				scanf("%d",&p[i]->arrival);
			}
	
		for (i = 0; i < max; i++)
		{
		//	std::cin>>p[i] -> burst; 
			scanf("%d",&p[i]->burst);
		}
		for (i = 0; i < max; i++)
		{
		//	std::cin>>p[i] -> burst; 
			scanf("%d",&p[i]->priority);
		}
	
		
		int t=0;
	while (count < max)
		{
				while(t < max && p[t]->arrival <= period ) 
				{					
						append (p[t]);
						t=t+1;
				}
			exe = new(node);
			exe = serve();
        //    getchar();
			if (exe -> name != 0)
			{
					     period=period+exe->burst;
						exe -> finish = period;
						exe -> turnaround = exe -> finish - exe -> arrival;
						exe -> waiting = exe -> turnaround - exe -> burst;

						count ++;

						for (i = 0; i < max; i++)
						{
							if (p[i] -> name == exe -> name)
							{
								p[i] = exe;
							}
						}


						
					
			} 
			else
			{
								

				period = period + 1;
									
			}		
		} 

	
		int totalturnaround=0;
		for (i = 0; i < max; i++)
		{totalWaiting = totalWaiting + p[i] -> waiting;
		  totalturnaround= totalturnaround + p[i]->turnaround;
		}
		avgWaiting = totalWaiting *1.0 / max;
		double avgTT=totalturnaround*1.0/max;
		printf("%.2f\n",avgWaiting);
		printf("%.2f",avgTT);
		
	
 
}


---------------------------------------------

//Implement SJF algorithm to calculate the average waiting time and average turn around time

// You are using GCC
//Simulation of FCFS Scheduling algorithm used in Operating systems//
//Fixed time slice of 2 is used.Process queue is implemented a sLinked list//
//The program is tuned for user specified number of processes and Buurst times need to be entered//


#include <stdio.h>
#include <iostream>
#include <malloc.h>


struct node
{
	int arrival;
	int burst;
	int turnaround;
	int waiting;
	int finish;
	int name;

	struct node *next;
};

struct node *head = NULL;
struct node *tail = NULL;


int empty()
{
	if (head == NULL)
		return 1;
	else
		return 0;
}

void append (struct node *temp)
{			
	if (head == NULL)
	{
		head = temp;
		tail = temp;
		temp->next=NULL;
	}
	else
	{ struct node *t,*previous;
	    if (head->burst>temp->burst)
	    {
	    	temp->next=head;
	    	head =temp;
	    	return ;
		}
		previous=head;
		t=head->next;
		while(t!=NULL && t->burst <= temp->burst)
		{
			previous=t;
			t=t->next;
		}
		temp -> next = t;
		previous->next = temp;
		return ; 
	}
}

struct node* serve ()
{
	struct node *temp;
	if (!empty())
	{
		temp = head;
		head = head -> next;

		return temp;			
	}
	else
	{
		//std::cout<<"Ready q is empty"<<"\n";
		temp = new(node);
		temp -> name = 0;
		return temp;
	}
}	

int main()
{
	int max;

	struct node *p[10];
	struct node *exe;

	int period = 0;
	int count = 0;
	int i;
	int choice;

	double totalWaiting = 0;
	double avgWaiting;
	
	scanf("%d",&max);
	
	
	
	 for (i = 0; i < max; i++)
		{	p[i] =new(node);
			p[i] -> turnaround = 0;
			p[i] -> waiting = 0;
			p[i] -> finish = 0;
			p[i] -> name = i + 1;
			p[i] -> next = NULL;
		}

			for (i = 0; i < max; i++)
			{
			//	std::cin>>p[i] -> arrival;
				scanf("%d",&p[i]->arrival);
			}
	
		for (i = 0; i < max; i++)
		{
		//	std::cin>>p[i] -> burst; 
			scanf("%d",&p[i]->burst);
		}

	
		
		int t=0;
	while (count < max)
		{
				while(t < max && p[t]->arrival <= period ) 
				{					
						append (p[t]);
						t=t+1;
				}
			exe = new(node);
			exe = serve();
        //    getchar();
			if (exe -> name != 0)
			{
					     period=period+exe->burst;
						exe -> finish = period;
						exe -> turnaround = exe -> finish - exe -> arrival;
						exe -> waiting = exe -> turnaround - exe -> burst;

						count ++;

						for (i = 0; i < max; i++)
						{
							if (p[i] -> name == exe -> name)
							{
								p[i] = exe;
							}
						}


						
					
			} 
			else
			{
								

				period = period + 1;
									
			}		
		} 

	
		int totalturnaround=0;
		for (i = 0; i < max; i++)
		{totalWaiting = totalWaiting + p[i] -> waiting;
		  totalturnaround= totalturnaround + p[i]->turnaround;
		}
		avgWaiting = totalWaiting *1.0 / max;
		double avgTT=totalturnaround*1.0/max;
		printf("%.2f\n",avgWaiting);
		printf("%.2f",avgTT);

}

------------------------------------------------------------

//Implement Bankers Algorithm

#include<stdio.h>

int safety(int allocation[][10],int need[][10],int avilable[],int n,int m)
{
	int work[m],finish[n],i,j,flag;
	for(i=0;i<n;i++)
	    finish[i]=0;
	for(i=0;i<m;i++)
	    work[i]=avilable[i];
	do
	{
	 flag=0;    
	 i=0;
	while(i<n)
	{
	   if(finish[i]==0)
	   {
	   	for(j=0;j<m;j++)
	   	  if(work[j]<need[i][j])
	   	     break;
	   	if(j==m)
	   	 {
	   		for(j=0;j<m;j++)
	   		   work[j]+=allocation[i][j];
	   		finish[i]=1;
	   	//	printf("Process %d is completed\n",i);
	   		flag=1;
	      } 
	      
		}
		i=i+1;
			
	}
}while(flag);
for(i=0;i<n;i++)
	if(finish[i]==0)
	  return 0;
	  
return 1;
}

int main()
{
	int i,j,k,n,m,allocation[10][10], max[10][10], need[10][10], avilable[10],request[10],pn;
	//("Enter the values of n and m");
	scanf("%d%d",&n,&m);
	////printf("Enter the max matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&max[i][j]);
	//printf("Enter Allocation Matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&allocation[i][j]);
    for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      need[i][j]=max[i][j]-allocation[i][j];
	      
	
//	printf("Enter The avilable vector:");
	for(i=0;i<m;i++)
	  scanf("%d", &avilable[i]);
	  
//	printf("The need matrix is");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		   printf("%d\t",need[i][j]);
		printf("\n");
	}
//	printf("Enter Process number: ");
	scanf("%d",&pn);
//	printf("Enter Request Vector\n");
	for(i=0;i<m;i++)
	   scanf("%d",&request[i]);
	for(i=0;i<m;i++)
	  if(request[i]>need[pn][i])
	     break;
	if(i<m)
	{
		printf("0\n");
		return 0;
	}
	for(i=0;i<m;i++)
	{
		if(request[i]>avilable[i])
		   {
		   	 printf("1\n");
		   	 return 0;
	      }
	}
	for(i=0;i<m;i++)
	{
		avilable[i]=avilable[i]-request[i];
		allocation[pn][i]=allocation[pn][i]+request[i];
		need[pn][i]=need[pn][i]-request[i];
	}
	
/*	printf("The need matrix is");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		   printf("%d\t",need[i][j]);
		printf("\n");
	}
	
	printf("The allocation matrix is");
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		   printf("%d\t",allocation[i][j]);
		printf("\n");
	}
	
	
	printf("The avilable vector is");
		for(j=0;j<m;j++)
		   printf("%d\t",avilable[j]);
		printf("\n");
	
	
	*/
		  	  
	i=safety(allocation,need,avilable,n,m);
	if(i==1)
	   printf("2\n");
	else
	   printf("3\n");
	   
	
	return 0;
	 }

-------------------------------------------------------------

//Implement multiple instance Deadlock Detection Algorithm

#include<stdio.h>

int safety(int allocation[][10],int request[][10],int avilable[],int n,int m)
{
	int work[m],finish[n],i,j,flag;
	for(i=0;i<n;i++)
	{
		for(j=0;j<m;j++)
		  if(allocation[i][j]>0)
		     break;
		if(j<m)
		   finish[i]=0;
		else
		   finish[i]=1;
	}
	for(i=0;i<m;i++)
	    work[i]=avilable[i];
	do
	{
	 flag=0;    
	 i=0;
	while(i<n)
	{
	   if(finish[i]==0)
	   {
	   	for(j=0;j<m;j++)
	   	  if(work[j]<request[i][j])
	   	     break;
	   	if(j==m)
	   	 {
	   		for(j=0;j<m;j++)
	   		   work[j]+=allocation[i][j];
	   		finish[i]=1;
	   	//	printf("Process %d is completed\n",i);
	   		flag=1;
	   		i=n;
	      } 
	      
		}
		i=i+1;
			
	}
}while(flag);
for(i=0;i<n;i++)
	if(finish[i]==0)
	  return 0;
	  
return 1;
}

int main()
{
	int i,j,k,n,m,allocation[10][10], request[10][10], avilable[10];
//	printf("Enter the values of n and m");
	scanf("%d%d",&n,&m);
//printf("Enter Allocation Matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&allocation[i][j]);
//	printf("Enter the request matrix");
	for(i=0;i<n;i++)
	   for(j=0;j<m;j++)
	      scanf("%d",&request[i][j]);
//	printf("Enter The avilable vector:");
	for(i=0;i<m;i++)
	  scanf("%d", &avilable[i]);
	  
		  	  
	i=safety(allocation,request,avilable,n,m);
	if(i==1)
	   printf("1\n");
	else
	   printf("0\n");
	   
	
	return 0;
	 }

----------------------------------------------------------------------

//Implement LRU page replacement algorithm

#include <iostream>
#include <vector>
#include <unordered_map>
#include <list>

using namespace std;

int lruPageFaults(const vector<int>& refString, int numFrames) {
    list<int> frameList;
    unordered_map<int, list<int>::iterator> frameMap;
    int pageFaults = 0;

    for (int page : refString) {
        if (frameMap.find(page) == frameMap.end()) {
            if (frameList.size() < numFrames) {
                frameList.push_front(page);
            } else {
                int lruPage = frameList.back();
                frameList.pop_back();
                frameMap.erase(lruPage);
                frameList.push_front(page);
            }
            frameMap[page] = frameList.begin();
            pageFaults++;
        } else {
            frameList.erase(frameMap[page]);
            frameList.push_front(page);
            frameMap[page] = frameList.begin();
        }
    }

    return pageFaults;
}

int main() {
    int length;
    //cout << "Enter the length of the reference string: ";
    cin >> length;

    vector<int> refString(length);
    //cout << "Enter the reference string page numbers: ";
    for (int i = 0; i < length; i++) {
        cin >> refString[i];
    }

    int numFrames;
    //cout << "Enter the number of frames allotted: ";
    cin >> numFrames;

    int faults = lruPageFaults(refString, numFrames);
    cout << faults << endl;

    return 0;
}

----------------------------------------------------------

//Implement FCFS page replacement algorithm

#include <iostream>
using namespace std;
int main(){
    int slen;
    cin>>slen;
    int arr[slen];
    int frames;
    for(int i=0;i<slen;i++){
        cin>>arr[i];
        
    }
    cin>>frames;
    int pagef=0;
    int m,n,s,pages;
    pages=sizeof(arr)/sizeof(arr[0]);
    int temp[frames];
    for(m=0;m<frames;m++){
        temp[m]=-1;
        
    }
    for(m=0;m<pages;m++){
        s=0;
        for(n=0;n<frames;n++){
            if(arr[m]==temp[n]){
                s++;
                pagef--;
            }
        }
        pagef++;
        if((pagef<=frames)&&(s==0)){
            temp[m]=arr[m];
            
        }
        else if(s==0){
            temp[(pagef-1)%frames]=arr[m];
        }
    }
    cout<<pagef;
    return 0;
}



-------------------------------------------------------

//Implement FCFS disk scheduling algorithm

// You are using GCC
#include <iostream>
#include <vector>
#include <cmath>

int fcfsDiskScheduling(int currentPosition, const std::vector<int>& requests) {
    int totalHeadMovement = 0;
    
    for (int i = 0; i < requests.size(); i++) {
        totalHeadMovement += std::abs(currentPosition - requests[i]);
        currentPosition = requests[i];
    }
    
    return totalHeadMovement;
}

int main() {
    int currentPosition, numRequests;
    std::vector<int> requests;
    
    std::cin >> currentPosition;
    std::cin >> numRequests;
    
    for (int i = 0; i < numRequests; i++) {
        int request;
        std::cin >> request;
        requests.push_back(request);
    }
    
    int totalHeadMovement = fcfsDiskScheduling(currentPosition, requests);
    
    std::cout << totalHeadMovement << std::endl;
    
    return 0;
}


----------------------------------------------------------

//Implement SSTF disk scheduling algorithm

// You are using GCC
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

int sstfDiskScheduling(int currentPosition, const std::vector<int>& requests) {
    int totalHeadMovement = 0;
    std::vector<int> sortedRequests = requests;
    
    std::sort(sortedRequests.begin(), sortedRequests.end(), [currentPosition](int a, int b) {
        return std::abs(a - currentPosition) < std::abs(b - currentPosition);
    });
    
    for (int i = 0; i < sortedRequests.size(); i++) {
        totalHeadMovement += std::abs(currentPosition - sortedRequests[i]);
        currentPosition = sortedRequests[i];
    }
    
    return totalHeadMovement;
}

int main() {
    int currentPosition, numRequests;
    std::vector<int> requests;
    
    std::cin >> currentPosition;
    std::cin >> numRequests;
    
    for (int i = 0; i < numRequests; i++) {
        int request;
        std::cin >> request;
        requests.push_back(request);
    }
    
    int totalHeadMovement = sstfDiskScheduling(currentPosition, requests);
    
    std::cout << totalHeadMovement << std::endl;
    
    return 0;
}

-----------------------------------------------------

//Implement Round Robin Scheduling algorithm. Take input number of processes, time quantum vale arrival time of each process



//Simulation of Round-Robin Scheduling algorithm used in Operating systems//
//Fixed time slice of 2 is used.Process queue is implemented a sLinked list//
//The program is tuned for 10 processes and Buurst times need to be entered//


#include <stdio.h>
#include <iostream>
#include <malloc.h>


struct node
{
	int arrival;
	int burst;
	int burst1;
	int turnaround;
	int waiting;
	int finish;
	int res;
	int name;

	struct node *next;
};

struct node *head = NULL;
struct node *tail = NULL;


int empty()
{
	if (head == NULL)
		return 1;
	else
		return 0;
}

void append (struct node *temp)
{			
	if (head == NULL)
	{
		head = temp;
		tail = temp;
		temp->next=NULL;
	}
	else
	{
		tail -> next = temp;
		tail = temp;
		tail -> next = NULL;
	}
}

struct node* serve ()
{
	struct node *temp;
	if (!empty())
	{
		temp = head;
		head = head -> next;

		return temp;			
	}
	else
	{
		//std::cout<<"Ready q is empty"<<"\n";
		temp = new(node);
		temp -> name = 0;
		return temp;
	}
}	

int main()
{
	int max;

	struct node *p[10];
	struct node *exe;

	int quantum;
	int period = 0;
	int count = 0;
	int i;
	int choice;

	double totalWaiting = 0;
	double avgWaiting;
	
//	std::cout<<"Enter number of process taken :";
	std::cin>>max;
	
//	std::cout<<"Enter Time Quantum value: ";
	std::cin>>quantum;

 for (i = 0; i < max; i++)
		{	p[i] =new(node);
			p[i] -> turnaround = 0;
			p[i] -> waiting = 0;
			p[i] -> finish = 0;
			p[i] -> name = i + 1;
			p[i] -> res=-1;
			p[i] -> next = NULL;
		}

			for (i = 0; i < max; i++)
			{
				std::cin>>p[i] -> arrival;
			//	std::cout<<i<<" arival time is "p[i]->arrival << "\n";
			}

		for (i = 0; i < max; i++)
		{
			std::cin>>p[i] -> burst; 
			p[i] -> burst1 = p[i] -> burst;
		}


		int t=0;
	while (count < max)
		{
				while(t < max && p[t]->arrival <= period ) 
				{					
						append (p[t]);
						t=t+1;
				}
			exe = new(node);
			exe = serve();
        //    getchar();
			if (exe -> name != 0)
			{
				if( exe -> res ==-1)
				     exe -> res=period - exe->arrival;
				if (exe -> burst1 > quantum)
				{
//				printf ("%d\t\t", period); 
					exe -> burst1 = exe -> burst1 - quantum;
					period = period + quantum;

//					printf ("%d\t\t%d\t\t%d\t\t%d\tQ\n", period, exe -> name, exe -> arrival, exe -> burst1);
					
					if (choice ==2 || choice ==3)
					{
						while(t < max && p[t]->arrival <= period ) 
						{					
							append (p[t]);
							t=t+1;
						}
					}

						append (exe); 
							
//					getch();
				} 
				else
				{
					//if (exe -> burst1 != 0)
					{
//						std::cout<< period<<"   ";
						period = period + exe -> burst1;
						exe -> burst1 = 0;
						exe -> finish = period;
						exe -> turnaround = exe -> finish - exe -> arrival;
						exe -> waiting = exe -> turnaround - exe -> burst;

						count ++;

						for (i = 0; i < max; i++)
						{
							if (p[i] -> name == exe -> name)
							{
								p[i] = exe;
							}
						}


//						printf ("\t\t%d\t\t%d\t\t%d\t\t%d\tFinish\n", period, exe -> name, exe -> arrival, exe -> burst1);						
						
//						getch();
					}
				}
			} 
			else
			{
									

				period = period + 1;
									
			}		
		} 

//		std::cout<<" \n\n\n";

//		printf("Process\t\tFinish time\t\tTurnAround time\t\tWaiting time\t\t Response Time\n");

		int totalturnaround=0;
		int totalres=0;
		for (i = 0; i < max; i++)
		{totalWaiting = totalWaiting + p[i] -> waiting;
		  totalturnaround= totalturnaround + p[i]->turnaround;
		  totalres=totalres + p[i] -> res;
		}
		avgWaiting = totalWaiting / max;
		double avgTT=totalturnaround*1.0/max;
		double avgres=totalres*1.0/max;
		//std::cout<<"\n\n";
		std::cout<<avgWaiting<<"\n";
		std::cout<<avgTT<<"\n";
		std::cout<<avgres<<"\n";
		
} 
